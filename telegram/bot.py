import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SERVER_URL = os.getenv("SERVER_URL", "http://127.0.0.1:8000/predict")
MIN_WORDS = os.getenv("MIN_WORDS")
MIN_DURATION = os.getenv("MIN_DURATION")

# –°–ª–æ–≤–∞—Ä—å –º–æ–¥–µ–ª–µ–π
MODELS = {
    "Classic ML": "logistic",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å": "cnn",
    "Transformer": "bert"
}


# --- –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏."""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        keyboard = [["Classic ML", "–ù–µ–π—Ä–æ—Å–µ—Ç—å", "Transformer"]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "üéß –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n\n"
            "‚Ä¢ Classic ML - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è ML –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å - –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ Transformer - —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )

        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await update.message.reply_text(
            "üéß –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∏–ª—è —Ä–µ—á–∏."
        )


async def handle_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫."""
    user_choice = update.message.text
    model_id = MODELS.get(user_choice)

    if model_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['selected_model'] = model_id
        await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: *{user_choice}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            parse_mode='Markdown',
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                [["Classic ML", "–ù–µ–π—Ä–æ—Å–µ—Ç—å", "Transformer"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )


# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ ---
async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
    if 'selected_model' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏!",
            reply_markup=ReplyKeyboardMarkup(
                [["Classic ML", "–ù–µ–π—Ä–æ—Å–µ—Ç—å", "Transformer"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    voice = update.message.voice
    audio = update.message.audio

    if not voice and not audio:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
        return

    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if voice and voice.duration < int(MIN_DURATION):
        await update.message.reply_text(
            f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *{MIN_DURATION} —Å–µ–∫—É–Ω–¥—ã*\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ª–∏–Ω–Ω–µ–µ.",
            parse_mode='Markdown'
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await update.message.chat.send_action(action="typing")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await context.bot.get_file(voice.file_id if voice else audio.file_id)
    file_bytes = await file.download_as_bytearray()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    files = {'file': ('audio.ogg', file_bytes, 'audio/ogg')}
    data = {'model': context.user_data['selected_model']}

    try:
        response = requests.post(f"{SERVER_URL}/classify", files=files, data=data, timeout=60)

        if response.status_code != 200:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            return

        response_data = response.json()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if response_data.get('success'):
            label = response_data.get('label')
            class_name = response_data.get('label_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            confidence = response_data.get('confidence', 0)
            text = response_data.get('text', '')
            duration = response_data.get('duration')
            word_count = response_data.get('word_count')
            model_used = response_data.get('model')
            # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model_name = next((name for name, id in MODELS.items() if id == model_used), model_used)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            response_parts = [
                f"üè∑ *–°—Ç–∏–ª—å —Ä–µ—á–∏:* {class_name}",
                f"üìä *–ö–æ–¥:* {label}",
                f"üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {confidence:.2f}",
                f"ü§ñ *–ú–æ–¥–µ–ª—å:* {model_name}"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if duration:
                response_parts.append(f"‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration:.1f}—Å")
            if word_count:
                response_parts.append(f"üìù *–°–ª–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* {word_count}")

            response_parts.append(f"\n*–¢–µ–∫—Å—Ç:*\n{text[:400]}{'...' if len(text) > 400 else ''}")

            await update.message.reply_text(
                "\n".join(response_parts),
                parse_mode='Markdown'
            )

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            if "—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ" in error_msg.lower():
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ª–∏–Ω–Ω–µ–µ (*{MIN_DURATION}+ —Å–µ–∫—É–Ω–¥*).",
                    parse_mode='Markdown'
                )
            elif "—Å–ª–æ–≤" in error_msg.lower():
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ (*{MIN_WORDS} —Å–ª–æ–≤*).",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_msg}")

    except requests.exceptions.Timeout:
        await update.message.reply_text(
            "‚è± –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        )
    except requests.exceptions.ConnectionError:
        await update.message.reply_text(
            "üîå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω."
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        r = requests.get(SERVER_URL.replace("/predict", "/docs"))
        if r.status_code == 200:
            await update.message.reply_text("‚úÖ –°–µ—Ä–≤–µ—Ä –≤ —Å–µ—Ç–∏!")
        else:
            await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def change_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"""
    keyboard = [
        ["Classic ML", "–ù–µ–π—Ä–æ—Å–µ—Ç—å", "Transformer"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å..."
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )


# --- –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("model", change_model))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_model_selection))
    app.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))

    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()


if __name__ == "__main__":
    main()